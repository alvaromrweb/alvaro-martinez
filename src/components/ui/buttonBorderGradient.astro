---
export interface Props {
  className?: string,
  onClickFn?: Function
}

const {className, onClickFn} = Astro.props
---
<button class={className}>
  <slot />
</button>



<style>
    button {
    --border-radius: 30px;
    --border-width: 4px;
    appearance: none;
    position: relative;
    padding: 0.52em 1.6em;
    border: 0;
    font-family: inherit;
    color: #fff;
    z-index: 2;
    border-radius: var(--border-radius);
    background:none;
    }
    @media (max-width:375px) {
        button {
            padding: 0.55em 1.6em;
        }
        body button:hover::after {
            padding: 1.35em;
        }
    }

    button::after {
    --m-i: linear-gradient(#000, #000);
    --m-o: content-box, padding-box;
    content: "";
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    padding: var(--border-width);
    border-radius: var(--border-radius);
    background-image: linear-gradient(to bottom right,#4f46e5,#4d9dff);
    -webkit-mask-image: var(--m-i), var(--m-i);
    mask-image: var(--m-i), var(--m-i);
    -webkit-mask-origin: var(--m-o);
    mask-origin: var(--m-o);
    -webkit-mask-clip: var(--m-o);
    mask-composite: exclude;
    -webkit-mask-composite: destination-out;
    filter: hue-rotate(0);
    z-index: -1;
    transition: all .3s;
    /* animation: rotate-hue linear 500ms infinite;
    animation-play-state: paused; */
    }

    /* button:hover {
        background: linear-gradient(to bottom right,#4f46e5,#4d9dff);
    } */

    button:hover::after {
        padding: 1.32em;
    }

    @keyframes rotate-hue {
    to {
    filter: hue-rotate(1turn);
    }
    }

    @keyframes rotate {
    0% {
    background-position: 0%;
    
    }

    100% {
    background-position: 400%;
    }
    }

    button,
    button::after {
    box-sizing: border-box;
    }

    button:active {
    --border-width: 5px;
    }
</style>